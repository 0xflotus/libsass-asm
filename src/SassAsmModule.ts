/** @internal */
type stringToUTF8Signature = (str: string, outPtr: number, maxBytesToWrite: number) => void;

/** @internal */
type cwrapSignature = <T = Function>(
  fn: string,
  returnType: 'number' | 'string' | 'array' | null,
  parameterType?: Array<string>
) => T;

/** @internal */
type FILESYSTEMS = {
  NODEFS: any;
  /* MEMFS: any; */ //libsass-asm does not support memfs, disabled
};

/**
 * Subset of internal filesystem api for wasm module.
 */
/** @internal */
type FS = {
  filesystems: FILESYSTEMS;
  stat: (path: string) => import('fs').Stats;
  isDir: (mode: number) => boolean;
  isFile: (mode: number) => boolean;
  mkdir: (path: string, mode?: number) => void;
  mount: (type: FILESYSTEMS, option: { root?: string }, mountpoint: string) => void;
  writeFile: (path: string, data: ArrayBufferView, opts: { encoding?: string; flags?: string }) => void;
  unlink: (path: string) => void;
  unmount: (mountpoint: string) => void;
  rmdir: (path: string) => void;
};

/**
 * @internal
 *
 * Interface for module generated by emscripten to load wasm binary.
 * https://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html
 */
interface SassAsmModule {
  cwrap: cwrapSignature;
  FS: FS;
  stringToUTF8: stringToUTF8Signature;
  stackAlloc: (length: number) => number;
  stackSave: () => number;
  stackRestore: (stack: number) => void;
  getValue: <T = any>(ptr: number, type: string, nosafe?: boolean) => T;
  Pointer_stringify: (ptr: number) => string;
  initializeRuntime(): Promise<boolean>;
}

/**
 * @internal
 *
 * libsass functions exported via EXPORTED_FUNCTIONS,
 * scope: Miscellaneous(https://github.com/sass/libsass/blob/master/docs/api-doc.md#miscellaneous-api-functions)
 */
interface SassAsmModule {
  _libsass_version: () => number;
  _libsass_language_version: () => number;
  _sass2scss_version: () => number;
}

export { stringToUTF8Signature, cwrapSignature, FILESYSTEMS, FS, SassAsmModule };
